// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  phone      String  @unique
  name       String
  password   String
  image      Image?  @relation(fields: [imageId], references: [id])
  role       Role    @default(USER)
  isVerified Boolean @default(false)

  verificationCode Int?
  verificationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
  Review    Review[]
}

enum Role {
  USER
  ADMIN
}

model Image {
  id         String   @id @default(cuid())
  url        String   @db.Text
  key        String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user             User[]
  Store            Store?          @relation(fields: [storeId], references: [id])
  storeId          String?
  Billboard        Billboard?      @relation(fields: [billboardId], references: [id])
  billboardId      String?
  Category         Category?       @relation(fields: [categoryId], references: [id])
  categoryId       String?
  Product          Product?        @relation(fields: [productId], references: [id])
  productId        String?
  Beverage         Beverage?       @relation(fields: [beverageId], references: [id])
  beverageId       Int?
  Drink            Drink?          @relation(fields: [drinkId], references: [id])
  drinkId          Int?
  Menu             Menu?           @relation(fields: [menuId], references: [id])
  menuId           Int?
  Breakfast        Breakfast?      @relation(fields: [breakfastId], references: [id])
  breakfastId      Int?
  CakeAndDessert   CakeAndDessert? @relation(fields: [cakeAndDessertId], references: [id])
  cakeAndDessertId Int?
}

model Store {
  id         String      @id @default(uuid())
  name       String      @unique
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  reviews    Review[]    @relation("StoreToReview")
  images     Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  images     Image[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  image       Image[]
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id String @id @default(uuid())

  name String

  description String? @db.Text
  price       Decimal
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)

  beverageId       Int?
  beverage         Beverage?       @relation(fields: [beverageId], references: [id])
  drinkId          Int?
  drink            Drink?          @relation(fields: [drinkId], references: [id])
  menuId           Int?
  menu             Menu?           @relation(fields: [menuId], references: [id])
  breakfastId      Int?
  breakfast        Breakfast?      @relation(fields: [breakfastId], references: [id])
  cakeAndDessertId Int?
  cakeAndDessert   CakeAndDessert? @relation(fields: [cakeAndDessertId], references: [id])
  images           Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  storeId    String // Foreign Key to Store
  categoryId String // Foreign Key to Category

  orderItems OrderItem[] // Relation to Order model

  @@index([storeId])
  @@index([categoryId])
  @@index([beverageId])
  @@index([drinkId])
  @@index([menuId])
  @@index([breakfastId])
  @@index([cakeAndDessertId])
}

model Review {
  id Int @id @default(autoincrement())

  comment String
  rating  Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  storeId String
  store   Store  @relation("StoreToReview", fields: [storeId], references: [id])

  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  Product          Product?        @relation(fields: [productId], references: [id])
  productId        String?
  Beverage         Beverage?       @relation(fields: [beverageId], references: [id])
  beverageId       Int?
  Drink            Drink?          @relation(fields: [drinkId], references: [id])
  drinkId          Int?
  Menu             Menu?           @relation(fields: [menuId], references: [id])
  menuId           Int?
  Breakfast        Breakfast?      @relation(fields: [breakfastId], references: [id])
  breakfastId      Int?
  CakeAndDessert   CakeAndDessert? @relation(fields: [cakeAndDessertId], references: [id])
  cakeAndDessertId Int?

  @@index([userId])
  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  Authority  BigInt      @unique
  RefID      Int
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Beverage {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  images Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Drink {
  id         Int    @id @default(autoincrement())
  name       String
  categoryId Int

  products Product[]
  images   Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
  images   Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Breakfast {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  images Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CakeAndDessert {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
  images   Image[] // Relation to Image model

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
